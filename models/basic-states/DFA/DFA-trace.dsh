// DFA that accepts words which have an even number of A's and B's

abstract sig Alphabet {}
one sig A, B extends Alphabet {}

state DFA {
    input : seq Alphabet 
    output : one Bool

    init {
        output = boolean/False
        !input.isEmpty  
    }

    default state S00 {
        trans onA {
            when first[input] = A 
            goto S10 
            do input' = input.rest
        }
        trans onB {
            when first[input] = B 
            goto S01 
            do input' = input.rest
        }
        trans accept {
            when input.isEmpty 
            do output' = boolean/True 
        }
    }
    state S01 {
        trans onA {
            when first[input] = A 
            goto S11 
            do input' = input.rest
        }
        trans onB {
            when first[input] = B 
            goto S00 
            do input' = input.rest
        }
        trans reject {
            when input.isEmpty 
            do output' = boolean/False
        }
    }
    state S10 {
        trans onA {
            when first[input] = A 
            goto S00 
            do input' = input.rest
        }
        trans onB {
            when first[input] = B 
            goto S11 
            do input' = input.rest
        }
        trans reject {
            when input.isEmpty 
            do output' = boolean/False
        }
    }
    state S11 {
        trans onA {
            when first[input] = A 
            goto S01 
            do input' = input.rest
        }
        trans onB {
            when first[input] = B 
            goto S10 
            do input' = input.rest
        }
        trans reject {
            when input.isEmpty 
            do output' = boolean/False
        }
    }
}

pred evens[word: seq Alphabet] {
	(#(word :> A)).rem[2] = 0 
	(#(word :> B)).rem[2] = 0
}

check {
	evens[DshSnapshot/first.DFA_input] <=> isTrue[DshSnapshot/last.DFA_output]
}
for exactly 8 DshSnapshot


pred trace_pred [
s1: one DshSnapshot,
s2: one DshSnapshot,
s3: one DshSnapshot,
s4: one DshSnapshot,
s5: one DshSnapshot,
s6: one DshSnapshot] {
s1 = DshSnapshot/first &&
s2 = s1.DshSnapshot/next &&
s3 = s2.DshSnapshot/next &&
s4 = s3.DshSnapshot/next &&
s5 = s4.DshSnapshot/next &&
s6 = s5.DshSnapshot/next &&
s1.dsh_conf0 = DFA_S00 &&
s2.dsh_conf0 = DFA_S11 &&
s3.dsh_conf0 = DFA_S10 &&
s4.dsh_conf0 = DFA_S00 &&
s5.dsh_conf0 = DFA_S01 &&
s6.dsh_conf0 = DFA_S11}

run trace_pred for exactly 6 DshSnapshot